#include <chrono>
#include <fstream>
#include <iostream>
#include <list>
#include <string>
#include <vector>

/**------------------------------------------------------------------------
 * *                                INFO
 *   虽然此程序确实能够解决 Advent of Code 2023: day02 part1 的题目，
 *   但是程序过于面向过程，很多地方的代码写得过于冗余，且鲁棒性不足。
 *   希望使用更加面向对象的方法，给出该题目的解决方案。
 *------------------------------------------------------------------------**/

int getTotalNumbersOfColorCube(std::string &line)
{
    std::vector<std::string> colors_vector    = {"red", "green", "blue"};
    int                      temp_nums_colors = 0;
    int                      game_id          = 0;
    for (auto char_iter = line.begin(); char_iter != line.end(); ++char_iter)
    {
        // 记录 game id
        if (*char_iter == ':')
        {
            if (std::isdigit(*(char_iter - 1)) &&
                std::isdigit(*(char_iter - 2)))
            {
                // 两位数 game id
                game_id = std::stoi(std::string(1, *(char_iter - 2))) * 10 +
                          std::stoi(std::string(1, *(char_iter - 1)));
            }
            else
            {
                // 一位数 game id
                game_id = std::stoi(std::string(1, *(char_iter - 1)));
            }
        }

        // 对比颜色字符串，并检查对应的颜色个数是否满足要求
        for (auto color_iter = colors_vector.begin();
             color_iter != colors_vector.end();
             ++color_iter)
        {
            // c++11标准中，substr() 无需显示进行越界检查
            if (line.substr(char_iter - line.begin(), color_iter->size()) ==
                *color_iter)
            {
                // 判断数字是一位数还是两位数
                if (std::isdigit(*(char_iter - 2)) &&
                    std::isdigit(*(char_iter - 3)))
                {
                    // 颜色cube个数为两位数
                    temp_nums_colors =
                        std::stoi(std::string(1, *(char_iter - 3))) * 10 +
                        std::stoi(std::string(1, *(char_iter - 2)));
                }
                else
                {
                    // 颜色cube个数为一位数
                    temp_nums_colors =
                        std::stoi(std::string(1, *(char_iter - 2)));
                }

                if (*color_iter == "red" && (temp_nums_colors > 12))
                {
                    // red cube个数大于 12，不满足条件，终止函数，返回0
                    return 0;
                }
                else if (*color_iter == "green" && (temp_nums_colors > 13))
                {
                    // green cube个数大于 13，不满足条件，终止函数，返回0
                    return 0;
                }
                else if (*color_iter == "blue" && (temp_nums_colors > 14))
                {
                    // blue cube个数大于 14，不满足条件，终止函数，返回0
                    return 0;
                }
            } // endif same with one of colors
        }     // end loop colors_vector
    }         // end loop line

    return game_id;
}

int main(int argc, char *argv[])
{
    // 获取程序开始执行的时间点
    auto start_time = std::chrono::high_resolution_clock::now();

    std::string input_filename;
    if (argc != 2)
    {
        std::cerr << "Usage: " << argv[0] << " input_filename" << std::endl;
        exit(EXIT_FAILURE);
    }

    input_filename = argv[1];
    std::fstream input_file(input_filename, std::ios::in);

    // 检查文件是否正确打卡
    if (!input_file.is_open())
    {
        std::cerr << "Error opening file: " << input_filename << std::endl;
        exit(EXIT_FAILURE);
    }

    std::cout << "Get contents of the input file ...";

    std::string line;
    int         result = 0;
    while (std::getline(input_file, line))
    {
        // std::cout << line << std::endl;
        result += getTotalNumbersOfColorCube(line);
        // break;
    }

    input_file.close();

    // 获取程序结束执行的时间点
    auto end_time = std::chrono::high_resolution_clock::now();
    // 计算时间差
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(
        end_time - start_time);

    std::cout << "   Finished ! " << std::endl;
    std::cout << "Result: " << result << std::endl; // right answer: 2285

    // 输出程序运行时间
    std::cout << "Time taken by function: " << duration.count()
              << " microseconds" << std::endl;

    return 0;
}